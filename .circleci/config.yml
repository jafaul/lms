# This config was automatically generated from your source code
# Stacks detected: deps:python:.,file:manage.py:.,package_manager:poetry:.
version: 2.1
orbs:
  python: circleci/python@2
jobs:
  test-python:
    # Install dependencies and run tests
    docker:
      - image: cimg/python:3.12-node
    steps:
      - checkout
      - run:
          name: Install dependencies (without installing root package)
          command: poetry install --no-root
      - run:
          name: Run tests
          command: poetry run python manage.py test

  deploy:
    # This is an example deploy job, not actually used by the workflow
    docker:
      - image: cimg/base:stable
    steps:
      # Replace this with steps to deploy to users
      - run:
          name: deploy
          command: '# e.g. ./deploy.sh'

workflows:
  build-and-test:
    jobs:
      - test-python
      - deploy:
          requires:
            - test-python

environment:
  DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
  DEBUG: ${DEBUG}
  DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE}

  DJANGO_PROJECT_PORT: ${DJANGO_PROJECT_PORT}
  DB_PORT: ${DB_PORT}
  DB_USERNAME: ${DB_USERNAME}
  DB_PASSWORD: ${DB_PASSWORD}
  DB_NAME: ${DB_NAME}
  DB_HOST: ${DB_HOST}

  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
  AWS_STORAGE_BUCKET_NAME: ${AWS_STORAGE_BUCKET_NAME}
  AWS_S3_SIGNATURE_NAME: ${AWS_S3_SIGNATURE_NAME}
  AWS_S3_REGION_NAME: ${AWS_S3_REGION_NAME}

  EMAIL_HOST: ${EMAIL_HOST}
  EMAIL_PORT: ${EMAIL_PORT}
  EMAIL_HOST_USER: ${EMAIL_HOST_USER}
  EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
  EMAIL_USE_TLS: ${EMAIL_USE_TLS}

  SOCIAL_AUTH_GOOGLE_OAUTH2_KEY: ${SOCIAL_AUTH_GOOGLE_OAUTH2_KEY}
  SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET: ${SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET}

  REDIS_ADDR: ${REDIS_ADDR}